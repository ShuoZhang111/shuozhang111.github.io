<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CourageZhang</title>
  
  <subtitle>notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhangshuo.xin/"/>
  <updated>2018-09-25T11:39:48.169Z</updated>
  <id>http://blog.zhangshuo.xin/</id>
  
  <author>
    <name>张硕</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ERROR 1698 (28000) Access denied for user &#39;root&#39;@&#39;localhost&#39;</title>
    <link href="http://blog.zhangshuo.xin/2018/09/25/mysql-1/"/>
    <id>http://blog.zhangshuo.xin/2018/09/25/mysql-1/</id>
    <published>2018-09-25T03:41:22.000Z</published>
    <updated>2018-09-25T11:39:48.169Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/136.png" class="full-image"></p><p>最近在电脑上安装新Mysql是遇到了一个ERROR 1698 (28000): Access denied for user ‘root’@’localhost’问题<br><a id="more"></a></p><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>在新的mysql中，如果密码在安装时保留为空，则它基于auth_socket插件<br>正确的方法是使用sudo权限登陆Mysql<br><code>sudo mysql -u root -p</code></p><p>然后使用下面命令更新密码<br><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;new-password&#39;;</code></p><p>完成后重启mysql<br><code>sudo service mysql stop</code><br><code>sudo servide mysql start</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/136.png&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在电脑上安装新Mysql是遇到了一个ERROR 1698 (28000): Access denied for user ‘root’@’localhost’问题&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://blog.zhangshuo.xin/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Boot（三）</title>
    <link href="http://blog.zhangshuo.xin/2018/08/18/javaWeb-6/"/>
    <id>http://blog.zhangshuo.xin/2018/08/18/javaWeb-6/</id>
    <published>2018-08-18T10:55:07.000Z</published>
    <updated>2018-09-25T03:48:25.948Z</updated>
    
    <content type="html"><![CDATA[<h5 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h5><ul><li>需要验证属性前添加验证规则<code>@Min(value = 18, message = &quot;未成年&quot;)</code></li><li>方法参数对象前添加<code>@Valid</code>表示需要验证的是这个对象,验证结果会返回到<code>BindingResult</code>对象中<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/person"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">personAdd</span><span class="params">(@Valid Person person, BindingResult bindingResult)</span></span>&#123;</div><div class="line">    <span class="comment">//如果有错误的话</span></div><div class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</div><div class="line">        System.out.println(bindingResult.getFieldError().getDefaultMessage());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    person.setAge(person.getAge);</div><div class="line">    person.setName(person.getName);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> personRepository.save(person);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><a id="more"></a><h5 id="使用AOP处理请求"><a href="#使用AOP处理请求" class="headerlink" title="使用AOP处理请求"></a>使用AOP处理请求</h5><p>横切的技术由面向对象构建的庞大的类的体系进行水平切割，并且会将影响多各类的公共行为封装成一个可重用的模块，这个模块成为切面<br>将通用的逻辑从业务逻辑中分离出来。<br><code>当Spring启动时类已经被实例化，当Http请求来到时是不会执行构造方法的</code></p><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>建立处理文件 HttpAspect.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span><span class="comment">//将这个文件引入到Spring容器中去</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpAspect</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h6 id="AOP统一处理请求日志"><a href="#AOP统一处理请求日志" class="headerlink" title="AOP统一处理请求日志"></a>AOP统一处理请求日志</h6>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;表单验证&quot;&gt;&lt;a href=&quot;#表单验证&quot; class=&quot;headerlink&quot; title=&quot;表单验证&quot;&gt;&lt;/a&gt;表单验证&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;需要验证属性前添加验证规则&lt;code&gt;@Min(value = 18, message = &amp;quot;未成年&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;方法参数对象前添加&lt;code&gt;@Valid&lt;/code&gt;表示需要验证的是这个对象,验证结果会返回到&lt;code&gt;BindingResult&lt;/code&gt;对象中&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@PostMapping&lt;/span&gt;(value = &lt;span class=&quot;string&quot;&gt;&quot;/person&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Person &lt;span class=&quot;title&quot;&gt;personAdd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Valid Person person, BindingResult bindingResult)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//	如果有错误的话&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bindingResult.hasErrors()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(bindingResult.getFieldError().getDefaultMessage());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    person.setAge(person.getAge);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    person.setName(person.getName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; personRepository.save(person);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.zhangshuo.xin/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Boot Jpa</title>
    <link href="http://blog.zhangshuo.xin/2018/08/16/javaWeb-5/"/>
    <id>http://blog.zhangshuo.xin/2018/08/16/javaWeb-5/</id>
    <published>2018-08-16T04:06:32.000Z</published>
    <updated>2018-09-25T11:42:53.595Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://ow2flmior.bkt.clouddn.com/image/blog/beach-calm-clouds-378271.jpg" class="full-image" alt="日出" title="日出"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h4 id="Spring-Boot-的一些数据库操作"><a href="#Spring-Boot-的一些数据库操作" class="headerlink" title="Spring-Boot 的一些数据库操作"></a>Spring-Boot 的一些数据库操作</h4><h5 id="Spring-Data-Jpa"><a href="#Spring-Data-Jpa" class="headerlink" title="Spring-Data-Jpa"></a>Spring-Data-Jpa</h5><p>JPA(Java Persistence API)定义了一系列对象持久化的标准，目前实现这一规范的产品有Hibernate， TopLink等。<br>添加组件<br><code>&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</code><br><code>&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</code><br>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">dev</span></div><div class="line"><span class="attr">datasource:</span><span class="comment">#配置数据库</span></div><div class="line"><span class="attr">  driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">  url:</span></div><div class="line"><span class="attr">  username:</span></div><div class="line"><span class="attr">  password:</span></div><div class="line"><span class="attr">jpa:</span><span class="comment">#配置jpa</span></div><div class="line"><span class="attr">  hibernate:</span></div><div class="line"><span class="attr">    ddl-auto:</span> <span class="string">create</span>  <span class="comment">#[updata,create-drop...]   create会在每次运行时自动创建表如果表中有数据会被删除</span></div><div class="line"><span class="attr">  show-sql:</span> <span class="literal">true</span><span class="comment">#控制台打印sql语句</span></div></pre></td></tr></table></figure><a id="more"></a><h5 id="新建类对应数据库"><a href="#新建类对应数据库" class="headerlink" title="新建类对应数据库"></a>新建类对应数据库</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用注解表示这个类对应数据库里的一个表</span></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">    <span class="comment">//无参构造方法</span></div><div class="line">    Person() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="对数据库进行操作"><a href="#对数据库进行操作" class="headerlink" title="对数据库进行操作"></a>对数据库进行操作</h5><p>PersonController.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowirted</span></div><div class="line"><span class="keyword">private</span> PersonRepository personRepository;</div><div class="line"><span class="comment">//获取列表</span></div><div class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/person"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">personList</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> personRepository.findAll();</div><div class="line">&#125;</div><div class="line"><span class="comment">//新增Person</span></div><div class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/person"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">personAdd</span><span class="params">(@RequestParam(<span class="string">"age"</span>)</span> Integer age,</span></div><div class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>&#123;</div><div class="line">Person person = <span class="keyword">new</span> Person();</div><div class="line">person.setAge(age);</div><div class="line">person.setName(name);</div><div class="line"></div><div class="line"><span class="keyword">return</span> personRepository.save(person);</div><div class="line">&#125;</div><div class="line"><span class="comment">//通过id查询</span></div><div class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/person/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">personFindOne</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</div><div class="line"><span class="keyword">return</span> personRepository.findOne(id);</div><div class="line">&#125;</div><div class="line"><span class="comment">//更新</span></div><div class="line"><span class="meta">@PutMapping</span>(value = <span class="string">"/person/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">personUpdate</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,</span></div><div class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age,</span></div><div class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>&#123;</div><div class="line">Person person = <span class="keyword">new</span> Person();</div><div class="line">person.setId(id);</div><div class="line">person.setAge(age);</div><div class="line">person.setName(name);</div><div class="line"></div><div class="line"><span class="keyword">return</span> personRepository.save(person);</div><div class="line">&#125;</div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="meta">@DeleteMapping</span>(value = <span class="string">"/person/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">personDelete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</div><div class="line">personRepository.delete(id);</div><div class="line">&#125;</div><div class="line"><span class="comment">//通过年龄查询</span></div><div class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/person/&#123;age&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">personListByAge</span><span class="params">(@PathVariable(<span class="string">"age"</span>)</span> Integer age) </span>&#123;</div><div class="line"><span class="keyword">return</span> personRepository.findByAge(age);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>PersonRepository.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">JpaReository</span>&lt;<span class="title">Person</span>, <span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//通过年龄查询</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">findByAge</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h4><p>@Transactional事务处理注解：<br>    使用@Transactional修饰的方法，该方法遇到错误即可自动回滚。<br>    查询时不需要事务处理注解，其他都需要添加事务处理注解。</p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/beach-calm-clouds-378271.jpg&quot; class=&quot;full-image&quot; alt=&quot;日出&quot; title=&quot;日出&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;h4 id=&quot;Spring-Boot-的一些数据库操作&quot;&gt;&lt;a href=&quot;#Spring-Boot-的一些数据库操作&quot; class=&quot;headerlink&quot; title=&quot;Spring-Boot 的一些数据库操作&quot;&gt;&lt;/a&gt;Spring-Boot 的一些数据库操作&lt;/h4&gt;&lt;h5 id=&quot;Spring-Data-Jpa&quot;&gt;&lt;a href=&quot;#Spring-Data-Jpa&quot; class=&quot;headerlink&quot; title=&quot;Spring-Data-Jpa&quot;&gt;&lt;/a&gt;Spring-Data-Jpa&lt;/h5&gt;&lt;p&gt;JPA(Java Persistence API)定义了一系列对象持久化的标准，目前实现这一规范的产品有Hibernate， TopLink等。&lt;br&gt;添加组件&lt;br&gt;&lt;code&gt;&amp;lt;artifactId&amp;gt;spring-boot-starter-data-jpa&amp;lt;/artifactId&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;&lt;/code&gt;&lt;br&gt;配置&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  profiles:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    active:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;dev&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;datasource:&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;#配置数据库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  driver-class-name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;com.mysql.jdbc.Driver&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  url:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  username:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  password:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;jpa:&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#配置jpa&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  hibernate:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ddl-auto:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;create&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#[updata,create-drop...]   create会在每次运行时自动创建表如果表中有数据会被删除&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  show-sql:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;#控制台打印sql语句&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.zhangshuo.xin/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>spring-boot 入门</title>
    <link href="http://blog.zhangshuo.xin/2018/08/14/javaWeb-4/"/>
    <id>http://blog.zhangshuo.xin/2018/08/14/javaWeb-4/</id>
    <published>2018-08-14T14:47:19.000Z</published>
    <updated>2018-09-17T15:06:57.412Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/beach-dawn-depth-of-field-1139541.png" alt="日落"></p><h5 id="Controller-处理Http请求"><a href="#Controller-处理Http请求" class="headerlink" title="@Controller 处理Http请求"></a>@Controller 处理Http请求</h5><p>@Controller 用来响应页面，@Controller必须结合模板使用<br>这里使用的Spring官方的模板thymeleaf<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><h5 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h5><p>Spring4之后新加入的注解，原来返回json需要@ResponseBody和@Controller配合，@RestController是@ResponseBody和@Controlle的组合<br><a id="more"></a></p><h5 id="RequestMapping-配置URL映射"><a href="#RequestMapping-配置URL映射" class="headerlink" title="@RequestMapping 配置URL映射"></a>@RequestMapping 配置URL映射</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET);</div><div class="line"><span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"/hello"</span>,<span class="string">"hi"</span>&#125;, method = RequestMethod.GET);</div></pre></td></tr></table></figure><p>@RequestMapping 此注解即可作用在控制器的某个方法上，也可以作用在此控制器类上。<br>当控制器在类级别上添加@RequestMapping注解时，这个注解会应用到控制器类的所有处理器方法上。</p><h5 id="组合注解"><a href="#组合注解" class="headerlink" title="组合注解"></a>组合注解</h5><p>@GetMapping(value = “/hello”)<br>@PostMapping(value = “/hello”)</p><h6 id="获取URL中参数"><a href="#获取URL中参数" class="headerlink" title="获取URL中参数"></a>获取URL中参数</h6><p>获取URL中的数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello/&#123;id&#125;"</span>, method = RequestMethod.GET);</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"id:"</span> + id;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>获取请求参数的值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET);</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"id:"</span> + id;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>不管是GET还是POST方式都可以通过@RequestParam()方式获取到这个值,假如参数不传会报400<br><code>@RequestParam(value = &quot;id&quot;, required = false, defaultValue = &quot;0&quot;);</code></p><ul><li>required 是否必须传</li><li>defaultValue 默认值使用字符</li></ul><h5 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h5><ul><li>在项目目录下运行<code>mvn spring-boot:run</code></li><li>在项目目录下编译一下<code>mvn install</code> 进入 target 目录下<code>java -jar XXX.jar</code></li></ul><h5 id="配置文件-XXX-yml"><a href="#配置文件-XXX-yml" class="headerlink" title="配置文件  XXX.yml"></a>配置文件  XXX.yml</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8080</span></div><div class="line"><span class="attr">  context-path:</span> <span class="string">/</span></div><div class="line"><span class="attr">person:</span></div><div class="line"><span class="attr">  age:</span> <span class="number">18</span></div><div class="line"><span class="attr">  name:</span> <span class="string">CZ</span></div></pre></td></tr></table></figure><p>在java文件中使用(一)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;person.age&#125;"</span>)</div><div class="line"><span class="keyword">private</span> Integer age;</div></pre></td></tr></table></figure></p><p>在java文件中使用(二)：将配置写入到类里<br>PersonProperties.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)  <span class="comment">//获取前缀是person的配置</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProperties</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>  String name;</div><div class="line">    <span class="keyword">private</span>  Integer age;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>helloController.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> PersonProperties personProperties;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span> ,method = RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> personProperties.getAge();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h5 id="开发环境和生产环境的配置问题"><a href="#开发环境和生产环境的配置问题" class="headerlink" title="开发环境和生产环境的配置问题"></a>开发环境和生产环境的配置问题</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">dev</span></div></pre></td></tr></table></figure><p>使用<code>java -jar XXX.jar --spring.profiles.active=prod</code>解决开发环境和生产环境的配置问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/beach-dawn-depth-of-field-1139541.png&quot; alt=&quot;日落&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;Controller-处理Http请求&quot;&gt;&lt;a href=&quot;#Controller-处理Http请求&quot; class=&quot;headerlink&quot; title=&quot;@Controller 处理Http请求&quot;&gt;&lt;/a&gt;@Controller 处理Http请求&lt;/h5&gt;&lt;p&gt;@Controller 用来响应页面，@Controller必须结合模板使用&lt;br&gt;这里使用的Spring官方的模板thymeleaf&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;RestController&quot;&gt;&lt;a href=&quot;#RestController&quot; class=&quot;headerlink&quot; title=&quot;@RestController&quot;&gt;&lt;/a&gt;@RestController&lt;/h5&gt;&lt;p&gt;Spring4之后新加入的注解，原来返回json需要@ResponseBody和@Controller配合，@RestController是@ResponseBody和@Controlle的组合&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.zhangshuo.xin/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>写给十年后的你</title>
    <link href="http://blog.zhangshuo.xin/2018/06/23/other-5/"/>
    <id>http://blog.zhangshuo.xin/2018/06/23/other-5/</id>
    <published>2018-06-23T07:31:41.000Z</published>
    <updated>2018-09-25T11:42:14.567Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写给十年后的你"><a href="#写给十年后的你" class="headerlink" title="写给十年后的你"></a>写给十年后的你</h4><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://ow2flmior.bkt.clouddn.com/image/blog/filco.png " class="full-image" alt="filco" title="filco"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>&emsp;&emsp;孩子，最近爸爸刚刚过完21岁的生日，在这个颇为高兴的日子里，你妈妈送给我了一个让我很是开心的礼物<br>&emsp;&emsp;孩子，爸爸是一名程序员，爸爸很小的时候还曾经幻想过拯救世界，所以爸爸在用自己的双手和妈妈给我买的键盘，慢慢的改变这个世界。这个世界上还有很多城市并不知道互联网是什么东西，也做不好互联网这个东西。爸爸希望通过自己和无数个你的程序员叔叔一起努力，慢慢的改变了人们的生活方式。</p><h5 id="孩子，妈妈爱我所以给我买了这把键盘，爸爸爱妈妈所以用这把键盘养活了咱家。"><a href="#孩子，妈妈爱我所以给我买了这把键盘，爸爸爱妈妈所以用这把键盘养活了咱家。" class="headerlink" title="孩子，妈妈爱我所以给我买了这把键盘，爸爸爱妈妈所以用这把键盘养活了咱家。"></a>孩子，妈妈爱我所以给我买了这把键盘，爸爸爱妈妈所以用这把键盘养活了咱家。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;写给十年后的你&quot;&gt;&lt;a href=&quot;#写给十年后的你&quot; class=&quot;headerlink&quot; title=&quot;写给十年后的你&quot;&gt;&lt;/a&gt;写给十年后的你&lt;/h4&gt;&lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://
      
    
    </summary>
    
      <category term="others" scheme="http://blog.zhangshuo.xin/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Eclipse Console不显示</title>
    <link href="http://blog.zhangshuo.xin/2018/06/09/java-other2/"/>
    <id>http://blog.zhangshuo.xin/2018/06/09/java-other2/</id>
    <published>2018-06-09T07:51:15.000Z</published>
    <updated>2018-08-16T03:55:36.401Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用Eclipse边运行项目边写代码的时候难免会受到Console弹窗的烦恼<br>在Preferences-&gt;Run/Debug-&gt;Console里面,有两个是关于显示的：</p><ul><li>一个是Show when program writes to standard out(当Console中有值弹出)</li><li>一个是Show when program writes standard error(当Console中有错误是弹出)。</li></ul><p>我们把这两个取消勾选就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在使用Eclipse边运行项目边写代码的时候难免会受到Console弹窗的烦恼&lt;br&gt;在Preferences-&amp;gt;Run/Debug-&amp;gt;Console里面,有两个是关于显示的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个是Show when program writes
      
    
    </summary>
    
      <category term="others" scheme="http://blog.zhangshuo.xin/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>这场战役我可能会输，但我肯定会站起来</title>
    <link href="http://blog.zhangshuo.xin/2018/06/06/other-4/"/>
    <id>http://blog.zhangshuo.xin/2018/06/06/other-4/</id>
    <published>2018-06-06T03:27:16.000Z</published>
    <updated>2018-06-06T09:16:54.166Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/other-4.png" alt="other-4"></p><h4 id="不要害怕失去什么，我们本来就一无所有。"><a href="#不要害怕失去什么，我们本来就一无所有。" class="headerlink" title="不要害怕失去什么，我们本来就一无所有。"></a>不要害怕失去什么，我们本来就一无所有。</h4><p>有人说高考是一件残酷的事情，其实高考并不算是很残酷的事情，只是因为这是你刚经历的第一件比较残酷的事情而已。<br>“高考不就是收麦子吗？辛苦种了三年，长得又好，你怎么就不敢收了。”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/other-4.png&quot; alt=&quot;other-4&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;不要害怕失去什么，我们本来就一无所有。&quot;&gt;&lt;a href=&quot;#不要害怕失去什么，我们本
      
    
    </summary>
    
      <category term="others" scheme="http://blog.zhangshuo.xin/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>脚踏实地，勿忘初心</title>
    <link href="http://blog.zhangshuo.xin/2018/06/02/other-3/"/>
    <id>http://blog.zhangshuo.xin/2018/06/02/other-3/</id>
    <published>2018-06-02T14:27:03.000Z</published>
    <updated>2018-06-02T15:38:20.575Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oanr6klwj.bkt.clouddn.com/blog/walder-massacre.jpg" alt="1"><br>    最近发现了一个APP像大家推荐一下。当然了，这篇文章的题目和文章的内容是没有半点关系的，题目是我随便起的，反正无所谓，开心就行。</p><h4 id="PalyTask"><a href="#PalyTask" class="headerlink" title="PalyTask"></a>PalyTask</h4><p>我记得有句话是这样说的，就是形容人的</p><blockquote><p>语言上的巨人，行动上的矮子</p></blockquote><a id="more"></a><p>其实想想也是，确实有很多人是这样的，这种人其实还是很需要同情的，但是我却不会可怜我自己，我还是很不喜欢我自己变成这种人的，就是不知道大家之前有没有听说过一种监督自己的游戏[成就商店]当时我记感觉特别有意思，所以我就记下来了，而且从16年的时候开始在本子上面记录确定执行，但是最近在逛知乎的时候发现了这个APP简直无敌，无敌在它的可量化，简直不要太牛*，<br><img src="http://ow2flmior.bkt.clouddn.com/statistics.png" alt="2"></p><h5 id="今日成就库"><a href="#今日成就库" class="headerlink" title="今日成就库"></a>今日成就库</h5><p><img src="http://ow2flmior.bkt.clouddn.com/one.png" alt="3"><br><strong>不好意思，目标太渺小，不接受任何形式的评价。</strong></p><h5 id="今日已完成"><a href="#今日已完成" class="headerlink" title="今日已完成"></a>今日已完成</h5><p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/2.png" alt="4"></p><h5 id="每周任务"><a href="#每周任务" class="headerlink" title="每周任务"></a>每周任务</h5><p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/3.png" alt="5"></p><h5 id="欲望库"><a href="#欲望库" class="headerlink" title="欲望库"></a>欲望库</h5><p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/4.png" alt="5"><br>其实这种方式可能半年内你感觉还是很不错的，等你养成这种习惯的时候就感觉这个[成就商店法]也就没什么用了，但是我在PlayTask中发现了竟然还有副本这种功能，无奈最近没有时间，感觉抽时间还是要仔细把玩一番。<br>  当然了，如果您是刚刚才开始的话，我比较建议您设计游戏的时候尽量的合理，免得会在消除金融赤字。那样的话就没有什么趣味了。写到最后-如果您真的理解了题目的意思那就真的太好了。<br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oanr6klwj.bkt.clouddn.com/blog/walder-massacre.jpg&quot; alt=&quot;1&quot;&gt;&lt;br&gt;    最近发现了一个APP像大家推荐一下。当然了，这篇文章的题目和文章的内容是没有半点关系的，题目是我随便起的，反正无所谓，开心就行。&lt;/p&gt;
&lt;h4 id=&quot;PalyTask&quot;&gt;&lt;a href=&quot;#PalyTask&quot; class=&quot;headerlink&quot; title=&quot;PalyTask&quot;&gt;&lt;/a&gt;PalyTask&lt;/h4&gt;&lt;p&gt;我记得有句话是这样说的，就是形容人的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语言上的巨人，行动上的矮子&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="others" scheme="http://blog.zhangshuo.xin/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>三次BEZIER插值曲线</title>
    <link href="http://blog.zhangshuo.xin/2018/03/17/BEZIER/"/>
    <id>http://blog.zhangshuo.xin/2018/03/17/BEZIER/</id>
    <published>2018-03-17T03:05:53.000Z</published>
    <updated>2018-08-16T08:25:36.107Z</updated>
    
    <content type="html"><![CDATA[<p>因为公司最近使用的写字板书写不尽人意勾起了我的兴趣，所以特地研究一番</p><h4 id="贝济埃曲线"><a href="#贝济埃曲线" class="headerlink" title="贝济埃曲线"></a>贝济埃曲线</h4><p>贝济埃曲线（EN:Bezier Curve 即贝塞尔曲线）是一些曲线几何的总称。    在本文中主要像大家展示三种Bezier Curve分别是Linear Bazier curves Quadratic Bezier curves Cubic Bezier curves 这三种都是经常使用的三种曲线，分别是一次曲线、二次曲线和三次曲线，当然还有一些更高维度的曲线就省略了，最后我会放几个图片大家自行理解一下。</p><h4 id="Linear-Bazier-curves"><a href="#Linear-Bazier-curves" class="headerlink" title="Linear Bazier curves"></a>Linear Bazier curves</h4><p>一次Bazier Curve 很容易理解，它实际上指的就是一条直线，没有任何弯度，所以使用一次Bazier Curves 进行插值的技术，有被称为Linear Interpolating。线性插值技术使用还是很广泛的，除去动画系统中，在3D图形的一些滤镜处理阶段也有使用，像光栅化阶段也用来对顶点数和纹理数据进行插值计算。<br>Linear Bazier<code>B(t) = p0 + (p1 - p0) * t = (1 - t)p0 + t * p1,t in [0,1]</code><br>给定点p0 p1,而B(t)为此时曲线的状态。此时是直线。<br><a id="more"></a></p><h4 id="Quadratic-Bezier-curves"><a href="#Quadratic-Bezier-curves" class="headerlink" title="Quadratic Bezier curves"></a>Quadratic Bezier curves</h4><p>二次Bezier Curves 是由函数B(t)跟踪的路径，给定点p0、p1和p2<br><code>B(t) = (1 - t)[(1 - t) * p0 + t * p1] + t[(1 - t) * p1 + t * p2],t in [0,1]</code><br>这可以解释为分别从p0到p1和p1到p2的线性Bezier Curves上相应点的线性插值重新排列等式得出<br><code>B(t) = (1 - t)^2 * p0 + 2 * t * (1 - t) * p1 + t^2 * p2,t in [0,1]</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为公司最近使用的写字板书写不尽人意勾起了我的兴趣，所以特地研究一番&lt;/p&gt;
&lt;h4 id=&quot;贝济埃曲线&quot;&gt;&lt;a href=&quot;#贝济埃曲线&quot; class=&quot;headerlink&quot; title=&quot;贝济埃曲线&quot;&gt;&lt;/a&gt;贝济埃曲线&lt;/h4&gt;&lt;p&gt;贝济埃曲线（EN:Bezier Curve 即贝塞尔曲线）是一些曲线几何的总称。    在本文中主要像大家展示三种Bezier Curve分别是Linear Bazier curves Quadratic Bezier curves Cubic Bezier curves 这三种都是经常使用的三种曲线，分别是一次曲线、二次曲线和三次曲线，当然还有一些更高维度的曲线就省略了，最后我会放几个图片大家自行理解一下。&lt;/p&gt;
&lt;h4 id=&quot;Linear-Bazier-curves&quot;&gt;&lt;a href=&quot;#Linear-Bazier-curves&quot; class=&quot;headerlink&quot; title=&quot;Linear Bazier curves&quot;&gt;&lt;/a&gt;Linear Bazier curves&lt;/h4&gt;&lt;p&gt;一次Bazier Curve 很容易理解，它实际上指的就是一条直线，没有任何弯度，所以使用一次Bazier Curves 进行插值的技术，有被称为Linear Interpolating。线性插值技术使用还是很广泛的，除去动画系统中，在3D图形的一些滤镜处理阶段也有使用，像光栅化阶段也用来对顶点数和纹理数据进行插值计算。&lt;br&gt;Linear Bazier&lt;code&gt;B(t) = p0 + (p1 - p0) * t = (1 - t)p0 + t * p1,t in [0,1]&lt;/code&gt;&lt;br&gt;给定点p0 p1,而B(t)为此时曲线的状态。此时是直线。&lt;br&gt;
    
    </summary>
    
      <category term="BEZIER" scheme="http://blog.zhangshuo.xin/categories/BEZIER/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 7.1.2 连接但无法访问互联网</title>
    <link href="http://blog.zhangshuo.xin/2018/03/16/other-2/"/>
    <id>http://blog.zhangshuo.xin/2018/03/16/other-2/</id>
    <published>2018-03-16T03:05:53.000Z</published>
    <updated>2018-08-16T03:56:35.786Z</updated>
    
    <content type="html"><![CDATA[<p>此方法只保证对本人手机有效(MOTO XT1570;LineageOS 7.1.2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global captive_portal_https_url https://www.google.cn/generate_204</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此方法只保证对本人手机有效(MOTO XT1570;LineageOS 7.1.2)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
      
    
    </summary>
    
      <category term="others" scheme="http://blog.zhangshuo.xin/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>Convention初识</title>
    <link href="http://blog.zhangshuo.xin/2018/02/23/javaWeb-3/"/>
    <id>http://blog.zhangshuo.xin/2018/02/23/javaWeb-3/</id>
    <published>2018-02-23T03:12:27.000Z</published>
    <updated>2018-08-16T08:16:08.309Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/11.jpg" alt="蒲公英"></p><h3 id="Struts2零配置"><a href="#Struts2零配置" class="headerlink" title="Struts2零配置"></a>Struts2零配置</h3><h4 id="Action映射规则："><a href="#Action映射规则：" class="headerlink" title="Action映射规则："></a>Action映射规则：</h4><h4 id="部署Action时-，actions-action-struts-struts2包会映射为根命名空间。"><a href="#部署Action时-，actions-action-struts-struts2包会映射为根命名空间。" class="headerlink" title="部署Action时 ，actions,action,struts,struts2包会映射为根命名空间。"></a>部署Action时 ，actions,action,struts,struts2包会映射为根命名空间。</h4><ul><li>如果Action类名包含Action后缀，则去掉。(LoginAction -&gt; login.action)</li><li>将类名的驼峰写法转成中划线写法(GetBooks -&gt; get-books.action)<a id="more"></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/11.jpg&quot; alt=&quot;蒲公英&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Struts2零配置&quot;&gt;&lt;a href=&quot;#Struts2零配置&quot; class=&quot;headerlink&quot; title=&quot;Struts2零配置&quot;&gt;&lt;/a&gt;Struts2零配置&lt;/h3&gt;&lt;h4 id=&quot;Action映射规则：&quot;&gt;&lt;a href=&quot;#Action映射规则：&quot; class=&quot;headerlink&quot; title=&quot;Action映射规则：&quot;&gt;&lt;/a&gt;Action映射规则：&lt;/h4&gt;&lt;h4 id=&quot;部署Action时-，actions-action-struts-struts2包会映射为根命名空间。&quot;&gt;&lt;a href=&quot;#部署Action时-，actions-action-struts-struts2包会映射为根命名空间。&quot; class=&quot;headerlink&quot; title=&quot;部署Action时 ，actions,action,struts,struts2包会映射为根命名空间。&quot;&gt;&lt;/a&gt;部署Action时 ，actions,action,struts,struts2包会映射为根命名空间。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果Action类名包含Action后缀，则去掉。(LoginAction -&amp;gt; login.action)&lt;/li&gt;
&lt;li&gt;将类名的驼峰写法转成中划线写法(GetBooks -&amp;gt; get-books.action)
    
    </summary>
    
      <category term="Java" scheme="http://blog.zhangshuo.xin/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Vim简单使用(一)</title>
    <link href="http://blog.zhangshuo.xin/2017/12/18/vim-1/"/>
    <id>http://blog.zhangshuo.xin/2017/12/18/vim-1/</id>
    <published>2017-12-18T03:00:40.000Z</published>
    <updated>2017-12-18T03:10:14.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于Vim"><a href="#关于Vim" class="headerlink" title="关于Vim"></a>关于Vim</h3><p>大家都知道Vim编辑器被称为<strong>神的编辑器</strong>它所带来的体验绝对是一般编辑器所不能带来的。说一下我的个人感觉吧，就是你永远都不知道它的所有功能</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>Vim有四种模式<br><strong>一般模式</strong>：在Linux终端中输入“vim 文件名”就进入了一般模式,但不能输入文字。<br><strong>编辑模式</strong>：在一般模式下按i就会进入编辑模式，此时就可以写程式，按Esc可回到一般模式。<br><strong>命令模式</strong>：在一般模式下按：就会进入命令模式，左下角会有一个冒号出现，此时可以敲入命令并执行。<br><strong>视图模式</strong>：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于Vim&quot;&gt;&lt;a href=&quot;#关于Vim&quot; class=&quot;headerlink&quot; title=&quot;关于Vim&quot;&gt;&lt;/a&gt;关于Vim&lt;/h3&gt;&lt;p&gt;大家都知道Vim编辑器被称为&lt;strong&gt;神的编辑器&lt;/strong&gt;它所带来的体验绝对是一般编辑器所不能带来的。
      
    
    </summary>
    
      <category term="others" scheme="http://blog.zhangshuo.xin/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>关于Windows Git Bash javac 乱码</title>
    <link href="http://blog.zhangshuo.xin/2017/12/15/other-1/"/>
    <id>http://blog.zhangshuo.xin/2017/12/15/other-1/</id>
    <published>2017-12-15T09:24:46.000Z</published>
    <updated>2017-12-18T02:59:55.591Z</updated>
    
    <content type="html"><![CDATA[<p>在%git/etc/bash.bashrc最后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias javac=&apos;javac -J-Dfile.encoding=UTF-8&apos;</div><div class="line">alias java=&apos;java -Dfile.encoding=UTF-8&apos;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在%git/etc/bash.bashrc最后输入&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line
      
    
    </summary>
    
      <category term="others" scheme="http://blog.zhangshuo.xin/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>记Apache POI 导出数据到Excel</title>
    <link href="http://blog.zhangshuo.xin/2017/11/22/javaWeb-2/"/>
    <id>http://blog.zhangshuo.xin/2017/11/22/javaWeb-2/</id>
    <published>2017-11-22T14:16:57.000Z</published>
    <updated>2018-02-23T09:05:32.995Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/12.jpg" alt="蒲公英"><br>作为一个使用Python-flask转JavaWeb的菜鸡来说刚开始各种框架的配置当然是感到各种不爽。还在迷茫。<br>还是说说最近接触项目的小功能吧。</p><h3 id="使用Apache-Poi包实现导出Excel"><a href="#使用Apache-Poi包实现导出Excel" class="headerlink" title="使用Apache Poi包实现导出Excel"></a>使用Apache Poi包实现导出Excel</h3><p>说一下项目背景吧：把界面查询到的结果数据导出到Excel并实现下载。初略看了一下业务代码的实现，就是简单的数据库查询包装成Json格式的字符串，返回到前端。<br>这里的坑就比较大了，说一下我踩坑的经历吧。<br>刚开始我以为会很简单，在前端界面得到ClassName和对应的MethodName。正好Java有个映射，我们可以通过类名和方法名就可以直接调用查询数据库的方法。但是我不知道为什么，在js中找不到ClassName和MethodName，没有办法。这里有一点要注意的是，我们即使得到了这两个方法也要注意数据库查询的分页问题。没办法我没有得到，所以我自己重写了查询数据库的无分页方法。<br><a id="more"></a></p><h3 id="Apache-POI组件包含的类和方法"><a href="#Apache-POI组件包含的类和方法" class="headerlink" title="Apache POI组件包含的类和方法"></a>Apache POI组件包含的类和方法</h3><ul><li>POIFS: 此组件是所有其他POI元件的基本因素。它被用来明确地读取不同的文件。</li><li>HSSF: 它被用来读取和写入MS-Excel文件的xls格式。</li><li>XSSF: 它是用于MS-Excel中XLSX文件格式。</li><li>HPSF: 它用来提取MS-Office文件属性设置。+</li><li>HWPF: 它是用来读取和写入MS-Word的文档扩展名的文件。</li><li>XWPF: 它是用来读取和写入MS-Word的docx扩展名的文件。</li><li>HSLF: 它是用于读取，创建和编辑PowerPoint演示文稿。</li><li>HDGF: 它包含类和方法为MS-Visio的二进制文件。</li><li>HPBF: 它被用来读取和写入MS-Publisher文件。<br>我在这里只说一下关于XSSF的简单使用，而且只是一个导出的小案例。</li></ul><h3 id="简单教程"><a href="#简单教程" class="headerlink" title="简单教程"></a>简单教程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HSSFWorkbook wb = new HSSFWorkbook();//类似于新建一个Excel文件</div><div class="line">HSSFSheet sheet = wb.createSheet();//类似于Excel中的sheet</div><div class="line">HSSFRow row = sheet.createRow(0);//类似于sheet中的每一行</div><div class="line">HSSFCell cell = null;//类似于sheet中的单元格</div></pre></td></tr></table></figure><h3 id="贴一下代码"><a href="#贴一下代码" class="headerlink" title="贴一下代码"></a>贴一下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">import javax.servlet.ServletOutputStream;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import org.apache.poi.hssf.usermodel.HSSFCell;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFRow;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFSheet;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</div><div class="line">import org.apache.struts2.ServletActionContext;</div><div class="line">import org.json.JSONArray;</div><div class="line">import org.json.JSONException;</div><div class="line">import org.json.JSONObject;</div><div class="line"></div><div class="line">public class toExcel &#123;</div><div class="line"></div><div class="line">public String dataList;</div><div class="line">public String[] excelTitle;</div><div class="line">public String[] field;</div><div class="line"></div><div class="line">/*</div><div class="line"> * createEasyExcel</div><div class="line"> * 返回 HSSFWorkbook文件</div><div class="line"> * </div><div class="line"> */</div><div class="line">private HSSFWorkbook createEasyExcel() throws JSONException&#123;</div><div class="line">HSSFWorkbook wb = new HSSFWorkbook();</div><div class="line">/*</div><div class="line"> * Apache poi 相关</div><div class="line"> * </div><div class="line"> * row 行</div><div class="line"> * cell 单元格</div><div class="line"> * </div><div class="line"> */</div><div class="line">HSSFSheet sheet = wb.createSheet();</div><div class="line">HSSFRow row = sheet.createRow(0);</div><div class="line"></div><div class="line">HSSFCell cell = null;</div><div class="line">HSSFRow rows = null;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">for (int i = 0; i &lt; excelTitle.length; i++) &#123;</div><div class="line">cell = row.createCell(i);</div><div class="line">cell.setCellValue(excelTitle[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">String list = dataList;</div><div class="line">JSONObject obj = new JSONObject(list);</div><div class="line">JSONArray obj2 = obj.getJSONArray(&quot;rows&quot;);</div><div class="line"></div><div class="line">for (int i = 0; i &lt; obj2.length(); i++) &#123;  </div><div class="line">    JSONObject temp = new JSONObject(obj2.getString(i));</div><div class="line">    rows = sheet.createRow(i+1);</div><div class="line">    for (int j = 0; j &lt; field.length ; j++) &#123;</div><div class="line">cell = rows.createCell(j);</div><div class="line">cell.setCellValue(temp.getString(field[j]));</div><div class="line">   &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line">return wb;</div><div class="line"></div><div class="line">&#125;</div><div class="line">public void createExcel() &#123;</div><div class="line">/*</div><div class="line"> * response 响应头</div><div class="line"> * 设置文件名称 result.xls</div><div class="line"> */</div><div class="line">HttpServletResponse response = ServletActionContext.getResponse();</div><div class="line">response.setContentType(&quot;application/octet-stream&quot;);</div><div class="line">response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=result.xls&quot;);</div><div class="line"></div><div class="line">try &#123;</div><div class="line">ServletOutputStream out = response.getOutputStream();</div><div class="line">createEasyExcel().write(out);</div><div class="line">out.flush();</div><div class="line">out.close();</div><div class="line"></div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * @author CourageShuo</div><div class="line"> * @param dataList 数据源-是一个String类型的Json文件</div><div class="line"> * @param excelTitle 是一个String[]类型，表示excel表头</div><div class="line"> */</div><div class="line">public toExcel(String dataList,String[] excelTitle)&#123;</div><div class="line">/*</div><div class="line"> * response 响应头</div><div class="line"> * 设置文件名称 result.xml</div><div class="line"> */</div><div class="line">this.dataList = dataList;</div><div class="line">this.excelTitle = excelTitle;</div><div class="line"></div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> * @author CourageShuo</div><div class="line"> * @param dataList 数据源-是一个String类型的Json文件</div><div class="line"> * @param excelTitle 是一个String[]类型，表示excel表头</div><div class="line"> * @param field dataList中的field Json文件中的Key值 一定保持和excelTitle中的名字“对应”</div><div class="line"> */</div><div class="line">public toExcel(String dataList,String[] excelTitle,String[] field) &#123;</div><div class="line">this.dataList = dataList;</div><div class="line">this.excelTitle = excelTitle;</div><div class="line">this.field = field;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里我做了一个简单的封装，主要参数就是</p><ul><li>数据源-是一个String类型的Json文件</li><li>是一个String[]类型，表示excel表头</li><li>dataList中的field Json文件中的Key值 一定保持和excelTitle中的名字“对应”</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/12.jpg&quot; alt=&quot;蒲公英&quot;&gt;&lt;br&gt;作为一个使用Python-flask转JavaWeb的菜鸡来说刚开始各种框架的配置当然是感到各种不爽。还在迷茫。&lt;br&gt;还是说说最近接触项目的小功能吧。&lt;/p&gt;
&lt;h3 id=&quot;使用Apache-Poi包实现导出Excel&quot;&gt;&lt;a href=&quot;#使用Apache-Poi包实现导出Excel&quot; class=&quot;headerlink&quot; title=&quot;使用Apache Poi包实现导出Excel&quot;&gt;&lt;/a&gt;使用Apache Poi包实现导出Excel&lt;/h3&gt;&lt;p&gt;说一下项目背景吧：把界面查询到的结果数据导出到Excel并实现下载。初略看了一下业务代码的实现，就是简单的数据库查询包装成Json格式的字符串，返回到前端。&lt;br&gt;这里的坑就比较大了，说一下我踩坑的经历吧。&lt;br&gt;刚开始我以为会很简单，在前端界面得到ClassName和对应的MethodName。正好Java有个映射，我们可以通过类名和方法名就可以直接调用查询数据库的方法。但是我不知道为什么，在js中找不到ClassName和MethodName，没有办法。这里有一点要注意的是，我们即使得到了这两个方法也要注意数据库查询的分页问题。没办法我没有得到，所以我自己重写了查询数据库的无分页方法。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.zhangshuo.xin/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java-other1</title>
    <link href="http://blog.zhangshuo.xin/2017/11/15/java-other1/"/>
    <id>http://blog.zhangshuo.xin/2017/11/15/java-other1/</id>
    <published>2017-11-15T00:45:35.000Z</published>
    <updated>2017-12-19T06:09:50.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Servlet-中的初始化参数"><a href="#Servlet-中的初始化参数" class="headerlink" title="Servlet 中的初始化参数"></a>Servlet 中的初始化参数</h3><p>在web.xml中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;init-param&gt;</div><div class="line">&lt;param-name&gt;admin-Email&lt;/param-name&gt;</div><div class="line">&lt;param-value&gt;***@***.com&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div></pre></td></tr></table></figure></p><p>在servlet代码中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getServletConfig().getInitParameter(&quot;admin-Email&quot;)</div></pre></td></tr></table></figure></p><p><strong>在servlet初始化之前不能使用servlet初始化参数</strong></p><p><strong>servlet初始化参数只能读一次就是在容器初始化servlet的时候</strong></p><p>当我们创建了Servlet的初始化参数的时候我们只能在其中一个Servlet中使用它，但是我们有时候总是需要在全局中使用。</p><h4 id="上下文初始对象"><a href="#上下文初始对象" class="headerlink" title="上下文初始对象"></a>上下文初始对象</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;context-param&gt;</div><div class="line">&lt;param-name&gt;admin-Email&lt;/param-name&gt;</div><div class="line">&lt;param-value&gt;***@***.com&lt;/param-value&gt;</div><div class="line">&lt;/context-param&gt;</div></pre></td></tr></table></figure><p><strong><context-param>是针对整个应用的，所以要放在<web-app>中，在<servlet>外</servlet></web-app></context-param></strong><br>在servlet代码中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getServletContext().getInitParameter(<span class="string">"admin-Email"</span>);</div></pre></td></tr></table></figure></p><h3 id="Servlet中ServletConfig和ServletContext之间的区别"><a href="#Servlet中ServletConfig和ServletContext之间的区别" class="headerlink" title="Servlet中ServletConfig和ServletContext之间的区别"></a>Servlet中ServletConfig和ServletContext之间的区别</h3><ul><li>语法：ServletConfig书写在每个特定的<sevlet>中，ServletContext书写在<web-app>中但不在<servlet>中</servlet></web-app></sevlet></li><li>整个Web应用只有一个ServletContext，并且整个Web应用都能访问他</li></ul><h3 id="ServletContext的其他使用"><a href="#ServletContext的其他使用" class="headerlink" title="ServletContext的其他使用"></a>ServletContext的其他使用</h3><p>ServletContext 是JSP或Servlet与容器以及其他Web应用其他部分的一个连接。</p><h4 id="一些ServletContext中的方法"><a href="#一些ServletContext中的方法" class="headerlink" title="一些ServletContext中的方法"></a>一些ServletContext中的方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;interface&gt;</div><div class="line">ServletContext</div><div class="line">--------------</div><div class="line">得到初始化参数以及获取/设置属性</div><div class="line">getInitParameter(String)</div><div class="line">getInitParameterNames()</div><div class="line">getAttribute(String)</div><div class="line">getAttributeNames()</div><div class="line">setAttribute(String,Object)</div><div class="line">removeAttribute(String)</div><div class="line">--------------</div><div class="line">得到有关服务器/容器的信息</div><div class="line">getMajorVersion()</div><div class="line">getServerInfo</div><div class="line">--------------</div><div class="line">getRealPath(String)</div><div class="line">getResourceAsStream(String)</div><div class="line">getRequestDispatcher(String)</div><div class="line">--------------</div><div class="line">log(String)</div></pre></td></tr></table></figure><h3 id="使用另外两种方式得到ServletContext"><a href="#使用另外两种方式得到ServletContext" class="headerlink" title="使用另外两种方式得到ServletContext"></a>使用另外两种方式得到ServletContext</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getServerConfig().getServletContext().getInitParameter()</div><div class="line">this.getServletContext().getInitParameter()</div></pre></td></tr></table></figure><h3 id="上下文监听器ServletContextListener"><a href="#上下文监听器ServletContextListener" class="headerlink" title="上下文监听器ServletContextListener"></a>上下文监听器ServletContextListener</h3><p>创建单独类，而不是JSP或Servlet，他能监听ServletContext一生中两个关键时间:初始化和撤销<br>这个类需要实现javax.servlet.ServletContextListener<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;interface&gt;</div><div class="line">ServletContextListener</div><div class="line">---------------------</div><div class="line">contexInitalized(ServletContextEvent)</div><div class="line">contexDestroyed(ServletContextEvent)</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.servlet.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitalized</span><span class="params">(ServletContextEvent enevt)</span></span>&#123;</div><div class="line"><span class="comment">//code</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent enevt)</span></span>&#123;</div><div class="line"><span class="comment">//code</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="在web-xml中部署"><a href="#在web-xml中部署" class="headerlink" title="在web.xml中部署"></a>在web.xml中部署<listener></listener></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></div><div class="line">com.shuo.MyServletContextListener</div><div class="line"><span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="上下文监听器实例"><a href="#上下文监听器实例" class="headerlink" title="上下文监听器实例"></a>上下文监听器实例</h3><p>MyServletContextListener.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.servlet.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent enevt)</span></span>&#123;</div><div class="line">ServletContext sc = enevt.getServletContext();</div><div class="line"></div><div class="line">String dogBreed = sc.getInitParameter(<span class="string">"breed"</span>);</div><div class="line">Dog d = <span class="keyword">new</span> Dog(dogBreed);</div><div class="line"></div><div class="line">sc.setAttribute(<span class="string">"dog"</span>,d);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent enevt)</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Dog.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</div><div class="line"><span class="keyword">private</span> String breed;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String breed)</span></span>&#123;</div><div class="line"><span class="keyword">this</span>.breed = breed;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBreed</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> breed;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ListenerTester.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.servlet.*;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> com.example.Dog;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerTester</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request ,HttpServletResponse response)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException ,ServletException</span>&#123;</div><div class="line">response.setContentType(<span class="string">"text/html"</span>);</div><div class="line">PrintWriter out = response.getWriter();</div><div class="line"></div><div class="line">out.println(<span class="string">"test contextListener &lt;br&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;br&gt;"</span>);</div><div class="line">out.println(<span class="string">"test contextListener &lt;br&gt;"</span>);</div><div class="line"></div><div class="line"></div><div class="line">Dog dog1 = (Dog) getServletContext().getAttribute(<span class="string">"dog"</span>);</div><div class="line"></div><div class="line">out.println(<span class="string">"dlsdjl"</span>);</div><div class="line">String B = dog1.getBreed();</div><div class="line">System.out.print(B);</div><div class="line">out.println(<span class="string">"dd"</span>+B);</div><div class="line">out.println(<span class="string">"dog breed is"</span> + dog1.getBreed());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>web.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListenerTester<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.ListenerTester<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListenerTester<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/listenertester.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>breed<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Great Dane<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></div><div class="line">com.example.MyServletContextListener</div><div class="line"><span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="常见的监听者"><a href="#常见的监听者" class="headerlink" title="常见的监听者"></a>常见的监听者</h3><table><thead><tr><th>场景</th><th>监听者接口</th><th>事件类型</th></tr></thead><tbody><tr><td>你想知道一个Web应用上下文<br>是否被增加删除或替换了一<br>个属性</td><td>javax.servlet.ServletContextAttributeListener<br>attributeAdder<br>attributeRemoved<br>attributeReplaced</td><td>ServletContextAttributeEvent</td></tr><tr><td>你想知道有多少个并发用户。</td><td>javax.servlet.HttpSessionListener<br>sessionCreated<br>sessionDestoryed</td><td>HttpSessionEvent</td></tr><tr><td>每次请求来到时你都想知道。</td><td>javax.servlet.ServletRequestListener<br>requestInitialied<br>requestDestoryed</td><td>ServletRequestEvent</td></tr><tr><td>增加，删除，替换一个请求属性时</td><td>javax.servlet.ServletRequestAttributeListener<br>attributeAdder<br>attributeRemoved<br>attributeReplaced</td><td>ServletRequestAttributeEvent</td></tr></tbody></table><p>###　属性和参数的区别<br>| — | 属性 | 参数　|<br>| — | — | —　|<br>| 类型 | 应用/上下文<br>请求<br>会话 | |<br>| 设置方法 | setAttribute(String name,Object value) | |<br>| 返回类型 | Object | |<br>| 获取方法 | getAttribute(String name) | |</p><h3 id="Servlet编写过滤器"><a href="#Servlet编写过滤器" class="headerlink" title="Servlet编写过滤器"></a>Servlet编写过滤器</h3><p>Servlet过滤器可以动态的拦截请求和响应，以变换或使用    包含在请求或相应中的信息。</p><h3 id="Struts-xml文件的配置"><a href="#Struts-xml文件的配置" class="headerlink" title="Struts.xml文件的配置"></a>Struts.xml文件的配置</h3><p>主要属性的说明：</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Servlet-中的初始化参数&quot;&gt;&lt;a href=&quot;#Servlet-中的初始化参数&quot; class=&quot;headerlink&quot; title=&quot;Servlet 中的初始化参数&quot;&gt;&lt;/a&gt;Servlet 中的初始化参数&lt;/h3&gt;&lt;p&gt;在web.xml中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;param-name&amp;gt;admin-Email&amp;lt;/param-name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;param-value&amp;gt;***@***.com&amp;lt;/param-value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在servlet代码中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;getServletConfig().getInitParameter(&amp;quot;admin-Email&amp;quot;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在servlet初始化之前不能使用servlet初始化参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;servlet初始化参数只能读一次就是在容器初始化servlet的时候&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当我们创建了Servlet的初始化参数的时候我们只能在其中一个Servlet中使用它，但是我们有时候总是需要在全局中使用。&lt;/p&gt;
&lt;h4 id=&quot;上下文初始对象&quot;&gt;&lt;a href=&quot;#上下文初始对象&quot; class=&quot;headerlink&quot; title=&quot;上下文初始对象&quot;&gt;&lt;/a&gt;上下文初始对象&lt;/h4&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.zhangshuo.xin/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java I/O的工作机制</title>
    <link href="http://blog.zhangshuo.xin/2017/11/14/javaWeb-1/"/>
    <id>http://blog.zhangshuo.xin/2017/11/14/javaWeb-1/</id>
    <published>2017-11-14T04:48:23.000Z</published>
    <updated>2017-12-18T02:47:00.483Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/8.jpg" alt="8"></p><p>I/O问题可以说是当今Web应用中所面临的重要问题之一，因为在当今这个海量数据的时代，这些数据都是随处流动的。这些流动就都涉及了I/O问题，可以说很多Web应用系统的瓶颈都是I/O瓶颈。</p><h3 id="Java的I-O类库的基本架构"><a href="#Java的I-O类库的基本架构" class="headerlink" title="Java的I/O类库的基本架构"></a>Java的I/O类库的基本架构</h3><p>Java的I/O操作类在包java.io下，大概有近80个类。大概分为四组:<br><a id="more"></a></p><ul><li>基于字节操作的I/O接口: InputStream和OutputStream.</li><li>基于字符操作的I/O接口: Writet和Reader.</li><li>基于磁盘操作的I/O接口: File.</li><li>基于网络操作的I/O接口: Socket.<br>前两种主要是传输数据的格式，后两者主要是传输数据的方式，但是Socket并不在java.io的包下。I/O的核心问题要么是数据格式影响力了I/O操作，要么是传输方式影响了I/O操作。是一种将什么样的数据写入到什么地方去的问题。</li></ul><h2 id="基于字节的I-O操作接口"><a href="#基于字节的I-O操作接口" class="headerlink" title="基于字节的I/O操作接口"></a>基于字节的I/O操作接口</h2><ul><li>InputStream</li><li>OutputStream</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/8.jpg&quot; alt=&quot;8&quot;&gt;&lt;/p&gt;
&lt;p&gt;I/O问题可以说是当今Web应用中所面临的重要问题之一，因为在当今这个海量数据的时代，这些数据都是随处流动的。这些流动就都涉及了I/O问题，可以说很多Web应用系统的瓶颈都是I/O瓶颈。&lt;/p&gt;
&lt;h3 id=&quot;Java的I-O类库的基本架构&quot;&gt;&lt;a href=&quot;#Java的I-O类库的基本架构&quot; class=&quot;headerlink&quot; title=&quot;Java的I/O类库的基本架构&quot;&gt;&lt;/a&gt;Java的I/O类库的基本架构&lt;/h3&gt;&lt;p&gt;Java的I/O操作类在包java.io下，大概有近80个类。大概分为四组:&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.zhangshuo.xin/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask学习笔记（七）</title>
    <link href="http://blog.zhangshuo.xin/2017/10/09/flaskStudy-7/"/>
    <id>http://blog.zhangshuo.xin/2017/10/09/flaskStudy-7/</id>
    <published>2017-10-09T04:52:14.000Z</published>
    <updated>2017-12-18T02:47:26.126Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/10.jpg" alt="10"><br>当我们的网站建设的比较漂亮的时候我们总是希望它能够更加的完善，但是当我们输入了一个不正确的路由地址的时候那么会显示一个404错误码，现在的404界面实在是太简陋了，我们希望它能够向我们user界面一样美观大方。<br>向常规路由一样。Flask允许程序使用基于模板的自定义错误页面。最常见的错误码有404和500。<br>首先我们在hello.py中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@app.route(404)</div><div class="line">def page_not_found(e):</div><div class="line">    return render_template(&apos;404.html&apos;),404</div><div class="line"></div><div class="line">@app.route(500)</div><div class="line">def internal_server_error(500):</div><div class="line">    return render_template(&apos;500.html&apos;),500</div></pre></td></tr></table></figure></p><a id="more"></a><p>和视图函数一样，错误处理函数也会返回响应。他们还返回与该错误对应的数字状态码。<br>错误处理程序中引用的模板也需要编写，这些模板应该鹤常规页面使用相同的布局，因此页有一个导航条和显示错误信息的页面头部。<br>当然了我们编写这些模板为了能够让他们实现使用相同的布局，我们最先想到的就是把他们复制一份。但是我们通常还是不会那样去做。</p><h3 id="Jinja2中的继承"><a href="#Jinja2中的继承" class="headerlink" title="Jinja2中的继承"></a>Jinja2中的继承</h3><p>我们在之前学习的Jinja2的时候我们说过继承。Jinja2中的继承机制可以帮助我们解决这类问题，Flask-BootStrap提供了一个具有页面基本布局的基类，同样程序也可以定义一个具有更完整页面布局的基类。我们把上一篇中的templates/user.html修改为templates/base.html,然后我们作出一些修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;bootstrap/base.html&quot; %&#125;</div><div class="line">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</div><div class="line">&#123;% block navbar %&#125;</div><div class="line">&lt;div class=&quot;navbar navbar-inverse&quot; role=&quot;navigation&quot;&gt;</div><div class="line">    &lt;div class=&quot;container&quot;&gt;</div><div class="line">        &lt;div class=&quot;navbar-header&quot;&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; </div><div class="line">             data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;</div><div class="line">                &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;/button&gt;</div><div class="line">            &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt;Flasky&lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;navbar-collapse collapse&quot;&gt;</div><div class="line">            &lt;ul class=&quot;nav navbar-nav&quot;&gt;</div><div class="line">                &lt;li&gt;&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div><div class="line">&#123;% block content %&#125;</div><div class="line">&lt;div class=&quot;container&quot;&gt;</div><div class="line">   &#123;% block page-content %&#125;</div><div class="line">   &#123;% endblock %&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure><p>这个模板中的content块中只有一个<div>容器，其中包含了一个名为page-content的新的空块，块中的内容由衍生的模板定义。<br>现在我们使用的模板继承自这个模板，而不是继承Flask-BootStrap的基模板。通过继承templates/base.html我们可以很容易的编写自定义的404错误页面。<br>templates/404.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% block title %&#125;Flasky - Page Not Found &#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page-content %&#125;</div><div class="line">&lt;div class=&quot;page-header&quot;&gt;</div><div class="line">    &lt;h1&gt;Not Found&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></div></p><p>user.html现在也可以通过继承base.html这个模板来简化内容。<br>./templates/user.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page-content %&#125;</div><div class="line">&lt;div class=&quot;page-header&quot;&gt;</div><div class="line">&lt;h1&gt;Hello,&#123;&#123; name &#125;&#125;!&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>任何具有多个路由的程序都需要可以链接不同页面的链接。<br>在模板中编写简单路由的URL链接不难。但对于包含可变部分的动态路由就比较困难。而且直接编写URL会对代码中定义的路由产生不必要的依赖关系，如果重新定义路由，模板中的链接可能会失效。<br>针对这样的问题，Flask提供了url_for()辅助函数。它可以<strong>使用程序URL映射中保存的信息生成URL。</strong><br>url_for()函数最简单的方法就是以视图函数名(或者app.add_url_route()定义路由是使用的端点名) 作为参数，返回对应的URL。例如在当前的hello.py程序中调用url_for(‘index’)得到的结果是//调用url_for(‘index’,_external=True)返回的则是绝对地址。例如:<a href="http://localhost:5000/" target="_blank" rel="external">http://localhost:5000/</a><br>使用url_for()生成动态地址时，将动态部分作为关键字参数传入。例如url_for(‘user’,name=’name’,_external=True)的返回结果是<a href="http://localhost:5000/user/name。" target="_blank" rel="external">http://localhost:5000/user/name。</a><br>传入url_for()的参数不仅限于动态路由中的参数。函数能将任何额外参数添加到查询字符串中。例如url_for(‘index’,page=2)返回的结果是?/page=2。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/10.jpg&quot; alt=&quot;10&quot;&gt;&lt;br&gt;当我们的网站建设的比较漂亮的时候我们总是希望它能够更加的完善，但是当我们输入了一个不正确的路由地址的时候那么会显示一个404错误码，现在的404界面实在是太简陋了，我们希望它能够向我们user界面一样美观大方。&lt;br&gt;向常规路由一样。Flask允许程序使用基于模板的自定义错误页面。最常见的错误码有404和500。&lt;br&gt;首先我们在hello.py中添加：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@app.route(404)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def page_not_found(e):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return render_template(&amp;apos;404.html&amp;apos;),404&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@app.route(500)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def internal_server_error(500):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return render_template(&amp;apos;500.html&amp;apos;),500&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.zhangshuo.xin/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask学习笔记（六）</title>
    <link href="http://blog.zhangshuo.xin/2017/10/05/flaskStudy-6/"/>
    <id>http://blog.zhangshuo.xin/2017/10/05/flaskStudy-6/</id>
    <published>2017-10-05T13:48:58.000Z</published>
    <updated>2017-12-18T02:42:46.773Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/9.jpg" alt="8"><br>在前面我们学习了Jinja2模板和Flask的render-template模板引擎，当我们想要做一个比较漂亮美观的网站的时候，我们总是先想到有没有比较好看的框架。这一篇我们了解以下Flask的Bootstrap</p><h3 id="使用Flask-Bootstrap"><a href="#使用Flask-Bootstrap" class="headerlink" title="使用Flask-Bootstrap"></a>使用Flask-Bootstrap</h3><p><a href="http://getbootstrap.com/" target="_blank" rel="external">Bootstrap</a>是Twitter开发的一个开源框架，它提供的用户界面组件可以创建整洁且具有吸引力的网页，而且这些网页还能兼容所有现代Web浏览器。<br>要想在程序中集成Bootstrap，显然要对模板作出必要的改动。不过，Flask有一个Flask-Bootstrap的拓展，简化集成的过程<br><code>(env)$ pip install flask-bootstrap</code><br>和Flask-Script一样也是从flask.ext命名空间中导入。<br>hello.py:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">from flask import Flask, render_template</div><div class="line">from flask.ext.script import Manager</div><div class="line">from flask.ext.bootstrap import BootStrap</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">manager = Manager(app)</div><div class="line">bootstrap = BootStrap(app)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def index():</div><div class="line">    return render_template(&apos;index.html&apos;)</div><div class="line">    </div><div class="line">@app.route(&apos;/user/&lt;name&gt;&apos;)</div><div class="line">def user(name):</div><div class="line">    return render_template(&apos;user.html&apos;.name=name)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    manager.run()</div></pre></td></tr></table></figure></p><p>./templates/user.html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;bootstrap/base.html&quot; %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block navbar %&#125;</div><div class="line">&lt;div class=&quot;navbar navbar-inverse&quot; role=&quot;navigation&quot;&gt;</div><div class="line">    &lt;div class=&quot;container&quot;&gt;</div><div class="line">        &lt;div class=&quot;navbar-header&quot;&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; </div><div class="line">             data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;</div><div class="line">                &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;/button&gt;</div><div class="line">            &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt;Flasky&lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;navbar-collapse collapse&quot;&gt;</div><div class="line">            &lt;ul class=&quot;nav navbar-nav&quot;&gt;</div><div class="line">                &lt;li&gt;&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block content %&#125;</div><div class="line">&lt;div class=&quot;container&quot;&gt;</div><div class="line">   &lt;div class=&quot;page-header&quot;&gt;</div><div class="line">       &lt;h1&gt;hello,&#123;&#123; name &#125;&#125;!&lt;/h1&gt;</div><div class="line">   &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p><p>Jinja2中的extends指令从Flask-Bootstrap中导入bootstrap/base.html,从而实现模板继承。Flask-Bootstrap中的基类模板提供了一个网页框架，引入了Bootstrap中的所有CSS鹤JavaScript文件。基类中定义了可以在衍生模板中使用的重定义的块。block和endblock指令定义的块中的内容可以添加到基模板中/<br>我们在user.html模板中定义了三个块，分别名为title，navbar和content。这些块都是基模板提供的，可以在衍生模板中重新定义。</p><h4 id="Flask-Bootstrap基模板中定义的块"><a href="#Flask-Bootstrap基模板中定义的块" class="headerlink" title="Flask-Bootstrap基模板中定义的块"></a>Flask-Bootstrap基模板中定义的块</h4><table><thead><tr><th>块名</th><th>说明</th></tr></thead><tbody><tr><td>doc</td><td>整个HTML文档</td></tr><tr><td>html_attribs</td><td><html>标签的属性</html></td></tr><tr><td>html</td><td><html>标签的内容</html></td></tr><tr><td>head</td><td><head>标签的内容</head></td></tr><tr><td>title</td><td><title>标签的内容</title></td></tr><tr><td>metas</td><td>一组<meta>标签</td></tr><tr><td>styles</td><td>层叠样式表定义</td></tr><tr><td>body_attribs</td><td><body>标签的属性</body></td></tr><tr><td>body</td><td><body>标签中的内容</body></td></tr><tr><td>navbar</td><td>用户定义的导航条</td></tr><tr><td>content</td><td>用户定义的页面内容</td></tr><tr><td>scripts</td><td>文档底部的JavaScipt声明</td></tr></tbody></table><p>表中的很多块都是Flask-Bootstrap自用的，如果直接重定义可能会导致一些问题。Bootstrap所需的文件在styles和scripts块中声明。如过程序需要向已经有内容的块中添加新内容，必须使用Jinja2提供的super()函数。例如，在衍生模板中添加新的JavaScript文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% block script %&#125;</div><div class="line">&#123;&#123; super() &#125;&#125;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;my-script.js&quot;&gt;&lt;/script&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/9.jpg&quot; alt=&quot;8&quot;&gt;&lt;br&gt;在前面我们学习了Jinja2模板和Flask的render-template模板引擎，当我们想要做一个比较漂亮美观的网站的时候，我们总是先想到有没有比较好看的框架。这一篇我们了解以下Flask的Bootstrap&lt;/p&gt;
&lt;h3 id=&quot;使用Flask-Bootstrap&quot;&gt;&lt;a href=&quot;#使用Flask-Bootstrap&quot; class=&quot;headerlink&quot; title=&quot;使用Flask-Bootstrap&quot;&gt;&lt;/a&gt;使用Flask-Bootstrap&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bootstrap&lt;/a&gt;是Twitter开发的一个开源框架，它提供的用户界面组件可以创建整洁且具有吸引力的网页，而且这些网页还能兼容所有现代Web浏览器。&lt;br&gt;要想在程序中集成Bootstrap，显然要对模板作出必要的改动。不过，Flask有一个Flask-Bootstrap的拓展，简化集成的过程&lt;br&gt;&lt;code&gt;(env)$ pip install flask-bootstrap&lt;/code&gt;&lt;br&gt;和Flask-Script一样也是从flask.ext命名空间中导入。&lt;br&gt;hello.py:&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.zhangshuo.xin/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask 学习笔记（五）</title>
    <link href="http://blog.zhangshuo.xin/2017/10/05/flaskStudy-5/"/>
    <id>http://blog.zhangshuo.xin/2017/10/05/flaskStudy-5/</id>
    <published>2017-10-05T09:33:09.000Z</published>
    <updated>2017-12-18T02:47:36.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/8.jpg" alt="8"><br>我记得在最早的一篇文章中我们说过Flask主要有两个依赖，这一篇文章我为大家介绍以下Flask的第二个依赖，<strong>模板</strong><br>要想开发出易于维护的程序，关键在于编写形式简洁且结构良好，当我们开发比较大的项目的时候，我们往往会使用到使用程序中的真实值去替换模板中的变量，最终得到响应字符串，这一过程我们称作渲染。</p><h3 id="Jinja2模块引擎"><a href="#Jinja2模块引擎" class="headerlink" title="Jinja2模块引擎"></a>Jinja2模块引擎</h3><p>形式最简单的Jinja2模板就是一个包含响应文本的文件。</p><h4 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h4><p>我们新建两个模块，样式是这样的：./templates/index.html ./templates/user.html<br>./templates/index.html<br><code>&lt;h1&gt;Hello World!&lt;/h1&gt;</code><br>./templates/user.html<br><code>&lt;h1&gt;Hello &lt;/h1&gt;</code><br>再新建一个渲染模块，格式是这样的: ./hello.py<br>./hello.py<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from flask import Flask, render_template</div><div class="line">from flask.ext.script import Manager </div><div class="line">app = Flask(__name__)</div><div class="line">manager = Manager(app)</div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def index():</div><div class="line">    return render_template(&apos;index.html&apos;)</div><div class="line">@app.route(&apos;/user/&lt;name&gt;&apos;)</div><div class="line">def user(name):</div><div class="line">    return render_template(&apos;user.html&apos;,name=name)</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    manager.run()</div></pre></td></tr></table></figure><p>Flask 程序提供了render_template函数把Jinja2模板引擎集成到了程序中。render_template函数的第一个参数是模板的文件名，随后的参数都是键值对，表示模板中变量对应的真实值。</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>上面例中，在模板user.html中使用结构表示一个变量，它是一种特殊的占位符，告诉模板引擎这个位置的值从渲染模块时使用的数据中获取。<br>Jinja2能识别所有类型的变量，甚至是一些复杂的类型，如列表，字典鹤对象，<br>Jinja2可以使用过滤器修改变量，过滤器名添加在变量名之后，中间使用竖线分割。<br><code>hello,</code></p><table><thead><tr><th>过滤器名</th><th>说明</th></tr></thead><tbody><tr><td>safe</td><td>渲染值是不转义</td></tr><tr><td>capitalize</td><td>把值的首字母转换成大写，其他字母转换成小写</td></tr><tr><td>lower</td><td>把值转换成小写形式</td></tr><tr><td>upper</td><td>把值转换成大写形式</td></tr><tr><td>title</td><td>把值中的每个单词的首字母都转换成大写</td></tr><tr><td>trim</td><td>把值中的首尾空格去掉</td></tr><tr><td>striptags</td><td>渲染之前把值中的所有HTML标签抖删除</td></tr></tbody></table><h4 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h4><p>Jinja2提供了多种控制结构，可以用来改变模板的渲染流程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;% if user %&#125;</div><div class="line">    hello, &#123;&#123; user &#125;&#125;!</div><div class="line">&#123;% else %&#125;</div><div class="line">    hello,stranger!</div><div class="line">&#123;% endif %&#125;</div><div class="line">----------------------------------------</div><div class="line">&lt;ul&gt;</div><div class="line">&#123;% for comment in comment %&#125;</div><div class="line">&lt;li&gt;&#123;&#123; comment &#125;&#125;&lt;/li&gt;</div><div class="line">&#123;% endfor %&#125;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">&#123;% extents &apos;base.html&apos;%&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/8.jpg&quot; alt=&quot;8&quot;&gt;&lt;br&gt;我记得在最早的一篇文章中我们说过Flask主要有两个依赖，这一篇文章我为大家介绍以下Flask的第二个依赖，&lt;strong&gt;模板&lt;/strong&gt;&lt;br&gt;要想开发出易于维护的程序，关键在于编写形式简洁且结构良好，当我们开发比较大的项目的时候，我们往往会使用到使用程序中的真实值去替换模板中的变量，最终得到响应字符串，这一过程我们称作渲染。&lt;/p&gt;
&lt;h3 id=&quot;Jinja2模块引擎&quot;&gt;&lt;a href=&quot;#Jinja2模块引擎&quot; class=&quot;headerlink&quot; title=&quot;Jinja2模块引擎&quot;&gt;&lt;/a&gt;Jinja2模块引擎&lt;/h3&gt;&lt;p&gt;形式最简单的Jinja2模板就是一个包含响应文本的文件。&lt;/p&gt;
&lt;h4 id=&quot;简单的例子&quot;&gt;&lt;a href=&quot;#简单的例子&quot; class=&quot;headerlink&quot; title=&quot;简单的例子&quot;&gt;&lt;/a&gt;简单的例子&lt;/h4&gt;&lt;p&gt;我们新建两个模块，样式是这样的：./templates/index.html ./templates/user.html&lt;br&gt;./templates/index.html&lt;br&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;br&gt;./templates/user.html&lt;br&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Hello &amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;br&gt;再新建一个渲染模块，格式是这样的: ./hello.py&lt;br&gt;./hello.py&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.zhangshuo.xin/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask学习笔记（四）</title>
    <link href="http://blog.zhangshuo.xin/2017/10/05/flaskStudy-4/"/>
    <id>http://blog.zhangshuo.xin/2017/10/05/flaskStudy-4/</id>
    <published>2017-10-05T04:45:39.000Z</published>
    <updated>2017-12-18T02:42:34.790Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow2flmior.bkt.clouddn.com/image/blog/6.jpg" alt="6"><br>在之前我们介绍Flask的时候就说过Flask是一个非常灵活的框架，而且Flask也是支持好多的拓展。</p><h3 id="Flask拓展"><a href="#Flask拓展" class="headerlink" title="Flask拓展"></a>Flask拓展</h3><p>Flask被设计为可拓展形式，故而没有提供一些重要的功能，例如数据库和用户认证，所以开发者可以自由选择最合适的包，或者按照需求自行开发。<br>当然了Flask有好多的拓展，就像<strong>海底之冰山</strong>我一直都是对未知的事物抱有一颗敬畏之心，所以我肯定是不会，而且也不必了解全部的拓展包。我们就只谈一下最常用的一些包。</p><h4 id="Flask-Script支持命令行选项"><a href="#Flask-Script支持命令行选项" class="headerlink" title="Flask-Script支持命令行选项"></a>Flask-Script支持命令行选项</h4><p>当我们使用Flask开发Web服务器的时候会支持很多启动设置选项，但只能在脚本中作为参数传递给app.run()函数，这样的操作是很不方便的，传递设置选项的理想方式就是使用命令行参数。<br>Flask-Script是Flask拓展，为Flask程序添加了一个命令行解析器。Flask-Script自带了一组常用的选项，而且还支持自定义命令。我们使用pip进行安装。<br><a id="more"></a></p><p><code>(env)$ pip install flask-script</code></p><pre><code>from flask.ext.script import Managerfrom flask import Flaskapp = Flask(__name__)manager = Manager(app)@app.routedef index():    return &apos;&lt;h1&gt;Hello World！&lt;/h1&gt;&apos;if __name__ == &apos;__main__&apos;:    manager.run()</code></pre><p>上面我们做了一个简单的示例。专门为Flask开发的拓展都暴露在flask.ext命名空间下。Flask-Script输出了一个名为Manager的类，可以从flask.ext.script中引入。<br>当我们启动这个程序的时候就可以解析命令了。</p><pre><code>$python hello.pyusage: hello.py [-h] {shell,runserver} ...positional arguments:  {shell,runserver}    shell             在Flask应用上下文中运行Python Shell    runserver         运行Flask开发服务器：app.run()optional arguments:  -h --help            显示帮助信息并退出</code></pre><p>shell命令用于在程序上下文中启动Python Shell会话，可以使用Shell维护，调试异常。<br>runserver命令用来启动Web服务器，运行<code>python hello.py runserver</code>将以调试模式启动Web服务器。</p><pre><code>(env)$python hello.py runserver --help usage: hello.py runserver [-h] [-t HOST] [-p PORT] [--threaded]                            [--processes PROCESSES] [--passthrough-errors] [-d] [-r]</code></pre><p>我们是这样运行上面的程序的</p><pre><code>(env)$ python hello.py runserver --host 0.0.0.0 * Running on http://0.0.0.0:5000/ * Restarting with reloader</code></pre><p>现在我们我们就可以访问了。关于–host后的参数，这里并不进行详细讲解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow2flmior.bkt.clouddn.com/image/blog/6.jpg&quot; alt=&quot;6&quot;&gt;&lt;br&gt;在之前我们介绍Flask的时候就说过Flask是一个非常灵活的框架，而且Flask也是支持好多的拓展。&lt;/p&gt;
&lt;h3 id=&quot;Flask拓展&quot;&gt;&lt;a href=&quot;#Flask拓展&quot; class=&quot;headerlink&quot; title=&quot;Flask拓展&quot;&gt;&lt;/a&gt;Flask拓展&lt;/h3&gt;&lt;p&gt;Flask被设计为可拓展形式，故而没有提供一些重要的功能，例如数据库和用户认证，所以开发者可以自由选择最合适的包，或者按照需求自行开发。&lt;br&gt;当然了Flask有好多的拓展，就像&lt;strong&gt;海底之冰山&lt;/strong&gt;我一直都是对未知的事物抱有一颗敬畏之心，所以我肯定是不会，而且也不必了解全部的拓展包。我们就只谈一下最常用的一些包。&lt;/p&gt;
&lt;h4 id=&quot;Flask-Script支持命令行选项&quot;&gt;&lt;a href=&quot;#Flask-Script支持命令行选项&quot; class=&quot;headerlink&quot; title=&quot;Flask-Script支持命令行选项&quot;&gt;&lt;/a&gt;Flask-Script支持命令行选项&lt;/h4&gt;&lt;p&gt;当我们使用Flask开发Web服务器的时候会支持很多启动设置选项，但只能在脚本中作为参数传递给app.run()函数，这样的操作是很不方便的，传递设置选项的理想方式就是使用命令行参数。&lt;br&gt;Flask-Script是Flask拓展，为Flask程序添加了一个命令行解析器。Flask-Script自带了一组常用的选项，而且还支持自定义命令。我们使用pip进行安装。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.zhangshuo.xin/categories/Python/"/>
    
    
  </entry>
  
</feed>
